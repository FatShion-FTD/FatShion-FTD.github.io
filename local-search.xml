<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>\[算法分析\] 动态规划 DP 之 1</title>
    <link href="/2022/12/04/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E4%B9%8B-1/"/>
    <url>/2022/12/04/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E4%B9%8B-1/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划-Dynamic-Programming"><a href="#动态规划-Dynamic-Programming" class="headerlink" title="动态规划 Dynamic Programming"></a>动态规划 Dynamic Programming</h1><p>算法题里面最操蛋的, 想得出来就是想得出来, 想不出来拿铜头皮带把你抽的陀螺转你也想不出来的<br><strong>动态规划</strong><br>这是第一篇, 所以更像是 DP 从何而来, 要干什么, (去到哪里, 什么人生三问).<br>拙见, 拙见. 我连工作都没有!! 我是个傻逼!!!</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>动态规划来自于 DFS, 深度优先搜索. 在 DFS 中, 我们经常遇到一个问题, 就是重复搜索了. 明明这些东西都见过了, 但未来要跑的路, 还要再跑一遍, 这就导致了时间复杂度, 哧儿一下上去了. 所以就有了 记忆化 memorization, 来记忆一种名叫 <strong>状态</strong> 的东西. 状态是啥, 这不重要, 因为这个因问题而异. 但是有一点很重要, 状态记录了哪些东西见过了 或者 哪些东西他没见过, 这很重要, 因为有了这些信息, 跟据香农的信息熵理论, 我们就不再做无用功了, 因为可能性为 1 的事件, 不产生信息. 回到问题, 利用状态, 我们就能快速判断是否重复, 并在O(1)内给出当前状态下再往后走的解.</p><p>那么上述过程, 是一种 top-down 的寻找, 是我们定义好状态后, 去规避去躲开重复的路. 这其实已经是 DP 了, 但是这太被动了, 也不够 elegant (会不能和阿尼亚当同学的).</p><h3 id="数学part-跳过跳过"><a href="#数学part-跳过跳过" class="headerlink" title="数学part, 跳过跳过!!"></a>数学part, 跳过跳过!!</h3><p>现在带一点数学, Markov Process 马尔可夫过程. </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">設為一概率空間，另設集合為一指標集合。如果對於所有，均有一隨機變量定義於概率空間，則集合為一隨機過程。—Wikipedia<br></code></pre></td></tr></table></figure><p>wiki我也看不懂, 只是贴一下. 我的拙见是: 首先这是个概率模型, 变量们互相变来变去是跟据一个概率来的, 这个过程就是 Markov Process. 下面的那个好理解.</p><p>A stochastic process is said to be Markov if<br>$prob(s_{t+1}|s^t)&#x3D;prob(s_{t+1}|s_{t})$<br>where $s^{t}$ is the history up to period t and $s_{t}$ is the realization of the state at period t.</p><p>那这个玩意儿重要在哪里: 就是在随机过程中，明天的状态只取决于今天的状态. 和之前的状态无关啦。也就是不管你今儿是怎样达到 的，只要你今天的状态是 现在这个数值, 你明天状态的可能性就决定好了.</p><p>你看这个马尔可夫过程中确定明天状态的部分, 是不是和 DFS + memo 去躲避重复计算很像? 当然熟悉状态机的朋友, 一下也能看出来, 马尔可夫过程就是个概率分布的状态机. </p><p>那跟据马尔可夫过程是不是也能做和 DFS + memo 相同的事了呢? 是的, 但是需要一个概率模型.</p><p>在 Markov Process 中, 这个概率模型 也被称之为 转移矩阵 (Transition Mtrix) 而最终结果也被叫做稳态 (stable state). 初始的概率分布, 在经过无数次矩阵乘法过后, 状态会逐渐收敛到稳态.</p><p>示例: 如果状态空间只包含了两个状态A和B。如果今天是A,那么明天还是A的概率为0.8。如果今日是B,那么明天还是B的概率为0.7。一开始状态在A, 求稳态方程如下:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Matlab"><span class="hljs-comment">%initial pi%</span><br><span class="hljs-built_in">pi</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>];       <span class="hljs-comment">% 表示初始概率分布, 随便换</span><br><br><span class="hljs-comment">%transistion matrix%</span><br>P=[<span class="hljs-number">0.8</span>,<span class="hljs-number">0.2</span>;<span class="hljs-number">0.3</span>,<span class="hljs-number">0.7</span>];<br><br><span class="hljs-comment">%critical value%</span><br>cv=<span class="hljs-number">1</span>;           <span class="hljs-comment">% 当前状态和上一状态的状态差</span><br><br><span class="hljs-keyword">while</span> cv&gt;<span class="hljs-number">0.0000000001</span>;      <span class="hljs-comment">% 状态稳定, 即状态差收敛到够小</span><br>    pi2=<span class="hljs-built_in">pi</span>*P;               <span class="hljs-comment">% 当前状态 = 上一状态 * 转移矩阵</span><br>    cv=<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">min</span>(pi2-<span class="hljs-built_in">pi</span>));    <span class="hljs-comment">% 状态差</span><br>    <span class="hljs-built_in">pi</span>=pi2;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>这个 pi 结果最后是 0.6 和 0.4. 不管换什么初始都会稳定在这里. </p><p>此时问题来了, 面对问题, 我们从哪儿来这个转移矩阵? 答案是 对问题抽象, 寻找子问题. 我们看下上述代码, 无数次的矩阵乘法 就对应了 子问题的重复进行, 而初始状态就是我们问题开始时候的状态, 这个是固定的. 稳定态自然也不是咱们追求的, 咱们要的只是 问题所需的某一状态作为结束. </p><p>再简化一下: 在有限状态转移下, 从固定初始状态到固定终结状态的有限状态转移问题. </p><h2 id="简而言之"><a href="#简而言之" class="headerlink" title="简而言之"></a>简而言之</h2><p>最优子问题, 找 状态转移方程 进行子问题扩大 直到 原问题</p><p>思路: 1. 发现递归 -&gt; 2. 从上到下的递归 -&gt; 3. 加入 记忆 的递归 -&gt; 4. 递归 转 迭代 + 记忆-&gt; 5. 优化记忆空间</p><p>一般来说, 还是 直接 找 状态转移方程 直接写实在</p><p>例题: 打家劫舍1</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="1-发现递归-是-抢-i-1-家-还是-抢-i-和-i-2家-赚"><a href="#1-发现递归-是-抢-i-1-家-还是-抢-i-和-i-2家-赚" class="headerlink" title="1. 发现递归: 是 抢 i-1 家 还是 抢 i 和 i-2家 赚"></a>1. 发现递归: 是 <strong>抢 i-1 家</strong> 还是 <strong>抢 i 和 i-2家</strong> 赚</h3><h3 id="2-从终末状态开始-从上到下递归"><a href="#2-从终末状态开始-从上到下递归" class="headerlink" title="2. 从终末状态开始, 从上到下递归:"></a>2. 从终末状态开始, 从上到下递归:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">return</span> rob(nums, nums.length-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> Math.max(rob(nums, i-<span class="hljs-number">1</span>), rob(nums, i-<span class="hljs-number">2</span>) + nums[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-加入-记忆-的递归"><a href="#3-加入-记忆-的递归" class="headerlink" title="3. 加入 记忆 的递归"></a>3. 加入 记忆 的递归</h3><p>发现这家抢过了, 以后抢多抢少也确定了(算过了), 直接 return</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] memo;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    memo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> rob(nums, nums.length-<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> i)</span>&#123;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(memo[i] != <span class="hljs-number">0</span>)    <span class="hljs-keyword">return</span> memo[i];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> Math.max(rob(nums, i-<span class="hljs-number">1</span>), rob(nums, i-<span class="hljs-number">2</span>) + nums[i]);<br>    memo[i] = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-递归-转-迭代-记忆"><a href="#4-递归-转-迭代-记忆" class="headerlink" title="4. 递归 转 迭代 + 记忆"></a>4. 递归 转 迭代 + 记忆</h3><p>状态转移从初始开始, 到终末状态结束. Markov Process 开始应用, 我不管你之前的状态了, 我就看后面. 从第一家开始抢, 到每家都看看, 是抢现在这家 + 上上一家 钱多 还是 抢上一家 钱多.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] memo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length + <span class="hljs-number">1</span>];<br>    memo[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    memo[<span class="hljs-number">1</span>] = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> nums[i];<br>        memo[i+<span class="hljs-number">1</span>] = Math.max(memo[i], memo[i-<span class="hljs-number">1</span>] + val);<br>    &#125;<br>    <span class="hljs-keyword">return</span> memo[nums.length];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-优化记忆空间"><a href="#5-优化记忆空间" class="headerlink" title="5. 优化记忆空间"></a>5. 优化记忆空间</h3><p>熟悉编译里面状态机的朋友看到这个带入状态机就好了, 3状态: 上一家prev2, 上上一家prev1, 现在.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">prev1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">prev2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> prev1;<br>        prev1 = Math.max(prev2 + num, prev1);<br>        prev2 = tmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev1;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法, 刷题, 找工</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mono-stack-analyse</title>
    <link href="/2022/12/04/mono-stack-analyse/"/>
    <url>/2022/12/04/mono-stack-analyse/</url>
    
    <content type="html"><![CDATA[<h1 id="单调栈-Mono-stack"><a href="#单调栈-Mono-stack" class="headerlink" title="单调栈 Mono-stack"></a>单调栈 Mono-stack</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>你是否觉着 Heap 比较虽然有大小, 但是没有了 序 order 很麻烦?<br>你是否觉着 有序序列 Ordered sequence 不能比较, 苦想白给?<br>单调栈, 它lei了.</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>来看下单调栈这个东西, 一种不怎么常见的数据结构. </p><p>首先来看下 stack 这个寄出到不能再基础的数据结构, FILO的属性决定了它具有前缀稳定 + 后缀操作 的特性.</p><p>啥是前缀稳定呢? 就是首先进入stack的数据, 不会与后续的数据 “见面”. 见不着面, 就没得比较, 没得操作, 所以稳定.</p><p>啥是后缀操作呢? 和上面那个反过来, 最新的数据 和 次新的数据 是在一直见面的, 他们之间就能比较, 能操作. </p><p>好了, 这是stack的属性. 跟您单调栈有嘛关系? 关系就是, 我还是个stack, 里面的东西有了 单增 或者 单减 的属性啦!</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test_article</title>
    <link href="/2022/12/03/test-article/"/>
    <url>/2022/12/03/test-article/</url>
    
    <content type="html"><![CDATA[<h1 id="香香-我的香香"><a href="#香香-我的香香" class="headerlink" title="香香, 我的香香"></a>香香, 我的香香</h1><h2 id="hexo-支持的img导入办法"><a href="#hexo-支持的img导入办法" class="headerlink" title="hexo 支持的img导入办法"></a>hexo 支持的img导入办法</h2><img src="/2022/12/03/test-article/asuka1.jpg" class="" title="香香, 我的香香">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/12/03/hello-world/"/>
    <url>/2022/12/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
